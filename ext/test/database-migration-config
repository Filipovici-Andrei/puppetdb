#!/usr/bin/env bash

set -euo pipefail

test_name=test-database-migration-config

usage() { echo 'Usage: [PDB_JAR=JAR] $(basename "$0") --pgbin PGBIN --pgport PGPORT'; }
misuse() { usage 1>&2; exit 2; }

argv=("$(cd "$(dirname "$0")" && pwd)/$(basename "$0")" "$@")
declare -A opt

while test $# -gt 0; do
    case "$1" in
        --pgbin|--pgport)
            test $# -gt 1 || misuse
            opt["${1:2}"]="$2"
            shift 2
            ;;
        *)
            misuse
    esac
done

if test -z "${opt[pgbin]:-}"; then
    opt[pgbin]="$(ext/bin/test-config --get pgbin)"
    if test  -z "${opt[pgbin]:-}"; then
        echo 'Please specify --pgbin or set pgbin with ext/bin/test-config' 1>&2
        exit 2
    fi
fi

if test -z "${opt[pgport]:-}"; then
    opt[pgport]="$(ext/bin/test-config --get pgport)"
     if test  -z "${opt[pgport]:-}"; then
        echo 'Please specify --pgport or set pgport with ext/bin/test-config' 1>&2
        exit 2
    fi
fi

set -x

if test -z "${PDBBOX:-}"; then
    # No PDBBOX, set one up and run ourselves again
    tmpdir="$(mktemp -d "$test_name-pdbbox-XXXXXX")"
    tmpdir="$(cd "$tmpdir" && pwd)"
    trap "$(printf 'rm -rf %q' "$tmpdir")" EXIT
    # Don't exec (or we'll never run the trap)
    ext/bin/with-pdbbox --box "$tmpdir/box" \
                        --pgbin "${opt[pgbin]}" --pgport "${opt[pgport]}" \
                        -- "${argv[@]}"
    exit 0
fi

tmpdir="$(mktemp -d "$test_name-XXXXXX")"
tmpdir="$(cd "$tmpdir" && pwd)"
trap "$(printf 'rm -rf %q' "$tmpdir")" EXIT


# Since we have an empty database, we need all the migrations, so we
# can just set the option to false to test whether it blocks them.

# Append "migrate = false" just after the [database] section header
sed '/\[database\]/a migrate = false' "$PDBBOX/pdb.ini" > "$tmpdir/pdb.ini"

for cmd in services upgrade; do
    rc=0
    ./pdb "$cmd" -c "$tmpdir/pdb.ini" 1>"$tmpdir/out" 2>"$tmpdir/err" || rc=$?
    cat "$tmpdir/out" "$tmpdir/err"
    echo  # in case the output doesn't end with a newline
    # This will become 109 once trapperkeeper supports custom exit statuses/
    test "$rc" -eq 109
    grep -F 'Database is not fully migrated and migration is disallowed' \
         "$tmpdir/err"
done
